---
import { Schema } from "astro-seo-schema";
import Logo from "@/assets/images/logo-urban-250.webp";
import pageImage from "@/assets/images/madrid.webp";

const {
    types,
    webTitle = "Urban web title",
    webDesc = "Urban web description",
    pageTitle = "Urban page title",
    pageDesc = "Urban page description",
    pageCover = pageImage,
    articleBody,
    datePublished,
    dateModified,
} = Astro.props;

const baseUrl = Astro.url.protocol + "//" + Astro.url.host + import.meta.env.BASE_URL;

// Available schemas
const website = {
    "@type": "WebSite",
    url: baseUrl,
    name: webTitle,
    description: webDesc,
    publisher: {
        "@id": `${baseUrl}#organization`,
    },
    inLanguage: "es-ES",
};

const webpage = {
    "@type": "WebPage", // Describing THIS specific page (the homepage)
    "@id": `${baseUrl}#webpage`, // Unique ID for this WebPage node
    url: baseUrl,
    name: pageTitle, // The <title> or H1 of the homepage
    description: pageDesc, // Homepage meta description
    publisher: {
        "@type": "Organization",
        "@id": `${baseUrl}#organization`,
    },

    primaryImageOfPage: {
        // Optional: if you have a main hero image for the homepage
        "@type": "ImageObject",
        url: pageCover.src,
        width: pageCover.width,
        height: pageCover.height,
    },
    // datePublished: "2023-01-15T08:00:00+00:00", // When the page was first published
    // dateModified: "2024-03-10T10:30:00+00:00", // When the page was last modified
    breadcrumb: {
        // Optional: breadcrumb for the homepage is usually just "Home"
        "@id": `${baseUrl}#breadcrumb`, // If you define BreadcrumbList elsewhere
    },
    mainEntity: {
        // You can point to the primary focus of THIS page
        // For the homepage, this might be the Organization or LocalBusiness
        "@id": `${baseUrl}#localbusiness`, // Or #organization, depending on emphasis
    },
};

const contactPage = {
    "@type": ["WebPage", "ContactPage"], // Describes the page itself
    "@id": `${baseUrl}contacto/#webpage`,
    url: `${baseUrl}contacto/`,
    name: pageTitle,
    description: pageDesc,
    isPartOf: {
        "@id": `${baseUrl}#website`, // Links to your main WebSite entity
    },
    mainEntity: {
        // The main entity this page is about
        "@id": `${baseUrl}#organization`, // Points to the Organization defined below
    },
};

const service = {
    "@type": "Service",
    name: pageTitle,
    alternateName: "Servicio de publicidad exterior",
    serviceType: pageTitle,
    description: pageDesc,
    provider: {
        "@id": `${baseUrl}#organization}`, // Or "LocalBusiness" / "Organization" if more appropriate
    },
    areaServed: [
        {
            "@type": "Country",
            name: "Spain",
        },
        // Add more specific areas as needed
    ],
    availableChannel: [
        // How can clients access or request this service?
        {
            "@type": "ServiceChannel",
            serviceUrl: `${baseUrl}contacto/`,
            description: "Online inquiry form",
        },
        {
            "@type": "ServiceChannel",
            servicePhone: {
                "@type": "ContactPoint",
                telephone: "+34-913-052-922",
                contactType: "Customer Service", // Or "Customer Service", "Technical Support"
            },
            description: "Phone consultation",
        },
    ],
    serviceOutput: {
        // What is the result or deliverable of the service?
        "@type": "Campaign", // Or be more specific if possible, e.g., "Report", "Campaign"
        name: `Realización de ${pageTitle}`,
        description: `${pageTitle} es un servicio para una campaña de publicidad exterior completamente gestionada que incluye ubicación de medios, implementación creativa e informes de rendimiento.`,
    },
    offers: {
        // Optional, but good if you have standard packages or want to indicate "Request a Quote"
        "@type": "Offer",
        itemOffered: {
            "@type": "Service",
            name: pageTitle, // Should match the main service name
        },
        priceCurrency: "EUR",
        // If pricing is custom/quote-based (typical for OOH):
        availability: "https://schema.org/InStock", // Indicates the service is available
        description:
            "Precios personalizados según el alcance y los requisitos de la campaña. Solicite un presupuesto para más detalles.",
        url: `${baseUrl}contacto/`,
        // If you have a fixed starting price or package:
        // "priceSpecification": {
        //   "@type": "PriceSpecification",
        //   "price": "[Price, e.g., 5000]",
        //   "priceCurrency": "[Currency, e.g., USD]",
        //   "valueAddedTaxIncluded": false, // or true
        //   "description": "Starting price for a basic digital billboard package."
        // }
    },
    potentialAction: {
        // Call to action
        "@type": "QuoteAction", // Or "OrderAction", "ReserveAction"
        target: {
            "@type": "EntryPoint",
            urlTemplate: `${baseUrl}contacto/`,
            actionPlatform: [
                "https://schema.org/DesktopWebPlatform",
                "https://schema.org/IOSPlatform",
                "https://schema.org/AndroidPlatform",
            ],
        },
        name: `Pedir presupuesto para ${pageTitle}`,
    },
    keywords: pageTitle, // Align with your SEO keywords for the page
};

const blogPosting = {
    "@type": "BlogPosting",
    "@id": `${baseUrl + pageTitle}/#article`, // Unique ID for this article
    mainEntityOfPage: {
        "@type": "WebPage",
        "@id": `${baseUrl}blog/${pageTitle}`, // The canonical URL of the blog post
    },
    headline: pageTitle,
    name: pageTitle, // Often same as headline
    description: pageDesc,
    image: {
        "@type": "ImageObject",
        url: pageCover.src, // URL of the main image for the post
        height: pageCover.height, // Optional, but good
        width: pageCover.width, // Optional, but good
    },
    author: {
        "@type": "Organization", // Or "Organization" if the org is the author
        name: webTitle,
        // url: "https://www.yourdomain.com/authors/john-doe/", // Optional URL to author's bio page
    },
    publisher: {
        "@type": "Organization",
        name: webTitle,
        logo: {
            "@type": "ImageObject",
            url: baseUrl + ".." + Logo.src,
            width: Logo.width,
            height: Logo.height,
        },
    },
    datePublished: datePublished, // "2023-10-27T09:30:00+00:00", // ISO 8601 format
    dateModified: dateModified, // "2023-10-27T09:30:00+00:00", // ISO 8601 format
    articleBody: articleBody,
    keywords: "keyword1, keyword2, relevant topic", // Comma-separated keywords
    inLanguage: "en-ES", // Language of the article
    // "commentCount": "15", // Optional: if you have comments
    isPartOf: {
        // Optional: if your blog post is part of a series or a larger collection
        "@type": "Blog",
        name: "Urban Style Publicity Blog",
        url: `${baseUrl}blog/`,
    },
};

const organization = {
    "@type": "Organization",
    "@id": `${baseUrl}#organization`, // Main organization ID
    name: webTitle,
    url: baseUrl,
    logo: baseUrl + ".." + Logo.src,
    description:
        "Agencia de publicidad exterior especializada en colocación y pegada de carteles, vallas publicitarias y otros soportes de publicidad exterior en Madrid, Barcelona y resto de España",
    sameAs: [
        "https://www.facebook.com/profile.php?id=61557928546519",
        "https://twitter.com/pegadacarteles",
        "https://instagram.com/urban_style_publicity",
        "https://www.youtube.com/@pegadadecarteles",
        "https://www.linkedin.com/in/pedro-jim%C3%A9nez-39671b124/",
        "https://www.wikidata.org/wiki/Q216931",
    ],
    contactPoint: {
        // General contact for the whole organization
        "@type": "ContactPoint",
        telephone: "+34-913-052-922", // Main company line
        contactType: "customer support", // Or "sales", "technical support" etc.
    },
    areaServed: {
        // Crucial for nationwide services
        "@type": "Country",
        name: "Spain", // Or be more specific with regions if needed using GeoShape
    },
    // You can list your departments/branches here if you wish
    department: [{ "@id": `${baseUrl}madrid/#localbusiness` }, { "@id": `${baseUrl}barcelona/#localbusiness` }],
};

const localbusiness = [
    {
        "@type": "LocalBusiness", // Or a more specific type like "ProfessionalService"
        "@id": `${baseUrl}madrid/#localbusiness`, // Unique ID for Madrid location
        name: `${webTitle} - Madrid`,
        parentOrganization: {
            // Links back to the main organization
            "@type": "Organization",
            name: webTitle,
            "@id": `${baseUrl}#organization`,
        },
        description: "Oficina de Madrid de Urban Style Publicity.",
        url: `${baseUrl}contacto/#madrid`, // URL of Madrid office page, if it exists
        telephone: "+34-913-052-922", // Madrid specific phone
        address: {
            "@type": "PostalAddress",
            streetAddress: "Av del Manzanares, 202",
            addressLocality: "Madrid",
            postalCode: "28026",
            addressCountry: "ES",
        },
        geo: {
            "@type": "GeoCoordinates",
            latitude: "40.3926834", // Madrid Latitude
            longitude: "-3.702346299999999", // Madrid Longitude
        },
        openingHoursSpecification: [
            {
                "@type": "OpeningHoursSpecification",
                dayOfWeek: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
                opens: "09:00",
                closes: "18:00",
            },
            {
                "@type": "OpeningHoursSpecification",
                dayOfWeek: "Friday",
                opens: "09:00",
                closes: "14:00",
            },
        ],
        // "areaServed" here could be "Madrid" or the specific regions it directly covers
    },
    {
        "@type": "LocalBusiness", // Or a more specific type
        "@id": `${baseUrl}barcelona/#localbusiness`, // Unique ID for Barcelona location
        name: `${webTitle} - Barcelona`,
        parentOrganization: {
            "@type": "Organization",
            name: webTitle,
            "@id": `${baseUrl}#organization`,
        },
        description: "Oficina de Barcelona de Urban Style Publicity.",
        url: `${baseUrl}contacto/#barcelona`, // URL of Barcelona office page, if it exists
        telephone: "+34-913-052-922", // Barcelona specific phone
        address: {
            "@type": "PostalAddress",
            streetAddress: "Calle Tamarit 104 local",
            addressLocality: "Barcelona",
            postalCode: "08015",
            addressCountry: "ES",
        },
        geo: {
            "@type": "GeoCoordinates",
            latitude: "41.37647323826379", // Barcelona Latitude
            longitude: "2.157992968240334", // Barcelona Longitude
        },
        openingHoursSpecification: [
            {
                "@type": "OpeningHoursSpecification",
                dayOfWeek: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
                opens: "09:00",
                closes: "18:00",
            },
            {
                "@type": "OpeningHoursSpecification",
                dayOfWeek: "Friday",
                opens: "09:00",
                closes: "14:00",
            },
        ],
        // "areaServed" here could be "Barcelona" or the specific regions it directly covers
    },
];

// Build schemas

const typesLower = (types ?? []).map((type: string) => (typeof type === "string" ? type.toLowerCase() : type));

function hasTypes(...expected: string[]) {
    return typesLower.length === expected.length && expected.every(type => typesLower.includes(type));
}

const schemaVariants = [
    // Home page
    {
        match: () => hasTypes("website"),
        item: {
            "@context": "https://schema.org",
            "@graph": [website, webpage, organization, ...localbusiness],
        },
    },
    // Contact page
    {
        match: () => hasTypes("contactpage"),
        item: {
            "@context": "https://schema.org",
            "@graph": [webpage, contactPage, organization, ...localbusiness],
        },
    },
    // Service page
    {
        match: () => hasTypes("service"),
        item: {
            "@context": "https://schema.org",
            "@graph": [webpage, service, organization, ...localbusiness],
        },
    },
    // Blog post
    {
        match: () => hasTypes("blogposting"),
        item: {
            "@context": "https://schema.org",
            "@graph": [webpage, blogPosting, organization],
        },
    },
];

const matchedSchema = schemaVariants.find(variant => variant.match());
---

{matchedSchema ? <Schema item={matchedSchema.item as any} /> : null}
